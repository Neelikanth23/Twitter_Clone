{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","Home","Search","NotificationsNone","MailOutline","BookmarkBorder","ListAlt","PermIdentity","MoreHoriz","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f44509d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SidebarOption.css\";\r\nfunction SidebarOption({ active, text, Icon }) {\r\n  return (\r\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\r\n      <Icon />\r\n      <h2>{text} </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarOption;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport {\r\n  Home,\r\n  Search,\r\n  NotificationsNone,\r\n  MailOutline,\r\n  BookmarkBorder,\r\n  ListAlt,\r\n  PermIdentity,\r\n  MoreHoriz,\r\n} from \"@material-ui/icons\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <TwitterIcon className=\"sidebar__twitterIcon\" />\r\n      <SidebarOption active text=\"Home\" Icon={Home} />\r\n      <SidebarOption text=\"Explore\" Icon={Search} />\r\n      <SidebarOption text=\"Notifications\" Icon={NotificationsNone} />\r\n      <SidebarOption text=\"MailOutline\" Icon={MailOutline} />\r\n      <SidebarOption text=\"BookmarkBorder\" Icon={BookmarkBorder} />\r\n      <SidebarOption text=\"ListAlt\" Icon={ListAlt} />\r\n      <SidebarOption text=\"Profile\" Icon={PermIdentity} />\r\n      <SidebarOption text=\"More\" Icon={MoreHoriz} />\r\n\r\n      <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>\r\n        Tweet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDG18rlEimOL4V9nZOWLoDpr00oRQVwCM4\",\r\n  authDomain: \"twitter-clone-2a4f6.firebaseapp.com\",\r\n  databaseURL: \"https://twitter-clone-2a4f6.firebaseio.com\",\r\n  projectId: \"twitter-clone-2a4f6\",\r\n  storageBucket: \"twitter-clone-2a4f6.appspot.com\",\r\n  messagingSenderId: \"1040610218117\",\r\n  appId: \"1:1040610218117:web:07c97bd68425b5a8ed19ec\",\r\n  measurementId: \"G-RT12EGREBC\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"posts\").add({\r\n      displayName: \"Neelikanth\",\r\n      username: \"neelikanthrocks@gmail.com\",\r\n      verified: true,\r\n      text: tweetMessage,\r\n      image: tweetImage,\r\n      avatar:\r\n        \"https://scontent.fvtz3-1.fna.fbcdn.net/v/t1.0-9/43022871_1373946072740001_527126636227723264_n.jpg?_nc_cat=101&_nc_sid=85a577&_nc_ohc=kQsv5XfcxaAAX8fVf6a&_nc_ht=scontent.fvtz3-1.fna&oh=1aa37771380eb6d82624c706d8910792&oe=5F6DB27D\",\r\n    });\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src=\"https://scontent.fvtz3-1.fna.fbcdn.net/v/t1.0-9/43022871_1373946072740001_527126636227723264_n.jpg?_nc_cat=101&_nc_sid=85a577&_nc_ohc=kQsv5XfcxaAAX8fVf6a&_nc_ht=scontent.fvtz3-1.fna&oh=1aa37771380eb6d82624c706d8910792&oe=5F6DB27D\" />\r\n\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n","import React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\n\r\nconst Post = forwardRef(\r\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__avatar\">\r\n          <Avatar src={avatar} />\r\n        </div>\r\n        <div className=\"post__body\">\r\n          <div className=\"post__header\">\r\n            <div className=\"post__headerText\">\r\n              <h3>\r\n                {displayName}{\" \"}\r\n                <span className=\"post__headerSpecial\">\r\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />} @\r\n                  {username}\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            <div className=\"post__headerDescription\">\r\n              <p>{text}</p>\r\n            </div>\r\n          </div>\r\n          <img className=\"post__image\" src={image} alt=\"\" />\r\n          <div className=\"post__footer\">\r\n            <ChatBubbleOutlineIcon fontSize=\"small\" />\r\n            <RepeatIcon fontSize=\"small\" />\r\n            <FavoriteBorderIcon fontSize=\"small\" />\r\n            <PublishIcon fontSize=\"small\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport \"./Feed.css\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport db from \"./firebase\";\r\n\r\nfunction Feed() {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"posts\").onSnapshot((snapshot) =>\r\n      setPosts(snapshot.docs.map((doc) => doc.data()))\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <div className=\"feed__header\">\r\n        <h2>Home</h2>\r\n      </div>\r\n\r\n      <TweetBox />\r\n\r\n      <FlipMove>\r\n        {posts.map((post) => (\r\n          <Post\r\n            key={post.text}\r\n            displayName={post.displayName}\r\n            username={post.username}\r\n            verified={post.verified}\r\n            text={post.text}\r\n            avatar={post.avatar}\r\n            image={post.image}\r\n          />\r\n        ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","import React from \"react\";\r\nimport \"./Widgets.css\";\r\nimport {\r\n  TwitterTimelineEmbed,\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <SearchIcon className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"widgets__widgetContainer\">\r\n        <h2>What's happening</h2>\r\n\r\n        <TwitterTweetEmbed tweetId={\"1299633296947642368\"} />\r\n\r\n        <TwitterTimelineEmbed\r\n          sourceType=\"profile\"\r\n          screenName=\"India\"\r\n          options={{ height: 400 }}\r\n        />\r\n\r\n        <TwitterShareButton\r\n          url={\"https://www.facebook.com/neelikanth.mnv\"}\r\n          options={{ text: \"#reactjs is awesome\", via: \"Neelikanth\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","import React from \"react\";\n\nimport \"./app.css\";\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/*Side Bar*/}\n      <Sidebar />\n\n      {/*Feed*/}\n      <Feed />\n\n      {/*Widgets*/}\n      <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}